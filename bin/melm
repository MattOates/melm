#!/usr/bin/env perl
=head1 NAME

I<melm> - mELM masking of assigned ELM motifs

=head1 USAGE

 melm [h,v,u,U,c,i,a,G,E,X,m,n,C,P,l,t,M,D,d] <SEQ FILES...>
    -h, --help
        this message
    -v, --verbose
        receive information about what melm is doing
    -u, --update 
        download and start using the latest class definitions from ELM.eu.org
    -U, --upgrade
        upgrade mELM to the latest version from GitHub.com/MattOates/melm
    -c, --list-classes
        get TSV output for the current ELM classes library melm is using 
    -i, --list-instances
        get TSV output of all the ELM instances held in the melm cache
    -a, --assign
        do not mask sequences, instead output a TSV format of all the ELM assignments made per sequence
    -G, -GFF3
        produce GFF3 output when using --assign, useful if you wish to add this assignment to a genome browser or similar
    -E <>, --max-class-expect=<>
        filter out ELM classes based on their annotated expectation, bigger E means allow for more common motifs
    -X, --hard-mask
        when masking use replacement 'x' characters instead of just making lower case (soft masking)
    -m, --mask-motifs
        instead of masking sequence free of motifs mask the motif rich regions
    -n <>, --num-elms=<>
        threshold number of elms per residue assigned to mask on
    -C <>, --min-elm-complexity=<>
        set a minimum limit of complexity rate to assign an ELM, larger number means more complex motifs included
    -P <>, --max-elm-probability=<>
        set the maximum ELM probability, if a short motif is found with high probability its perhaps too common to be a true positive
    -l, --logic-filter
        turn on ELM instance-logic filtering, if there are known false positive ELMs of this class matching the assigned sequence exclude from results 
    -t <>, --type=<>
        only include ELM classes of a given type: CLV (cleavage sites), DEG (degradation sites), DOC (docking sites), LIG (ligand binding sites), MOD (ptm sites), TRG (targeting sites)
    -M, --morf-filter
        if ANCHOR is installed use that to filter ELM output based on those having shared coverage with a predicted MoRF region
    -D, --disorder-filter
        if ANCHOR is installed use that to filter ELM output based on ANCHOR's IUPred disorder prediction, only include ELMs that fall within disordered regions
    -d <>, --anchor-datapath=<>
        provide the location of the anchor data path, mELM will otherwise assume it's in the same directory as your anchor binary

=head1 DESCRIPTION

mELM lets you get Eukaryotic Linear Motif assignments to protein sequences. The script automatically downloads the latest ELM library for you from http://elm.eu.org when you first use it.

Please make sure to cite the original ELM authors when using mELM results:
    Holger Dinkel, Kim Van Roey, Sushama Michael, Norman E. Davey, 
    Robert J. Weatheritt, Diana Born, Tobias Speck, Daniel Krüger, 
    Gleb Grebnev, Marta Kubań, Marta Strumillo, Bora Uyar, 
    Aidan Budd, Brigitte Altenberg, Markus Seiler, Lucía B. Chemes,
    Juliana Glavina, Ignacio E. Sánchez, Francesca Diella, 
    and Toby J. Gibson (2014)
    The eukaryotic linear motif resource ELM: 10 years and counting
    Nucl. Acids Res. 42(D1): D259-D266 
    doi:10.1093/nar/gkt1047

If you have used mELM with ANCHOR predictions please cite the following:
    Bálint Mészáros, István Simon and Zsuzsanna Dosztányi (2009) 
    Prediction of Protein Binding Regions in Disordered Proteins
    PLoS Comput Biol 5(5): e1000376. 
    doi:10.1371/journal.pcbi.1000376

=head1 EXAMPLES

Soft mask regions of a protein that do not contain any plausible ELM motifs

    melm human_proteins.fa > human_proteins_motifs.fa

Soft mask all regions of a protein that contain less than two linear motif classes, accounting for known false positives

    melm --num-motifs=2 --logic-filter human_proteins.fa > human_proteins_motif_rich.fa

Mask all PTM sites with 'X' in a set of seqences

    melm --hard-mask --mask-motifs --type=MOD human_proteins.fa > human_no_ptms.fa

Get a GFF3 file for a whole genomes worth of protein annotations

    melm --assign --GFF3 human_proteins.fa > human_motifs.gff3

Get the latest ELM classes library for use in another script or by yourself

    melm --update --list-classes

Get the latest ELM instances library for use in another script or by yourself

    melm --update --list-instances

=head1 AUTHOR

B<Matt Oates> - I<mattoates@gmail.com>

=head1 LICENSE

    melm - Mask and assign ELM motifs in protein sequence libraries
    (C) 2014-2016  Dr Matt E. Oates

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

=head1 EDIT HISTORY

2016-07-05 - Matt Oates
    * Majority of refactor complete

2016-06-25 - Matt Oates
    * Huge refactor into split packages allowing more ELM based tools, releases now are fatpacks

2016-05-23 - Matt Oates
    * Removed bitrot due to changes at ELM.eu.org and enabled support for v1.4 of ELM

2014-09-10
    * Allowed for the script to upgrade itself from GitHub and made it a bit more friendly to use

2014-09-09 - Matt Oates
    * Integrated ANCHOR predictions if this is installed on the system (independent of OS)
    * Limit motif assignment to predicted binding regions (MoRF) 
    * Limit motif assignment to predicted disordered regions

2014-09-08 - Matt Oates
    * ELM instance downloading
    * False Positive logic filtering based on ELM instances library.
    * GFF3 and assignment output

2014-09-05 - Matt Oates
    * Masking with only specific ELM classes included based on expect value and motif type

2014-08-30 - Matt Oates
    * First features added.

=head1 TODO

    * Create an HTML output report with everything in

=cut

#Pragmata
use warnings;
use strict;
use autodie;
use feature 'say';

#Core Deps
use List::Util qw/min max sum/;
use Getopt::Long;
use Pod::Usage;

#Non Core Deps
use Bio::SeqIO;
use ELM;
use ELM::Utils 'get_www';

#Current version of the script
our $VERSION = "v1.4.1";

#User options
my $help;
my $verbose;
my $update;
my $upgrade;
my $list_classes;
my $list_instances;
my $classes_version = '???';
my $instances_version = '???';
my $max_class_expect;
my $hard_mask;
my $mask_motifs = 0;
my $do_assignment;
my $num_elms;
my $min_elm_complexity;
my $max_elm_probability;
my $logic_filter;
my $morf_filter;
my $disorder_filter;
my $type;
my $gff;
my $anchor_datapath;

#Flags used h,v,u,U,c,i,a,G,E,X,m,n,C,P,l,t,M,D,d
GetOptions(
    "help|h!" => \$help,
    "verbose|v!" => \$verbose,
    "update|u!" => \$update,
    "upgrade|U!" => \$upgrade,
    "list-classes|c" => \$list_classes,
    "list-instances|i" => \$list_instances,
    "assign|a!" => \$do_assignment,
    "max-class-expect|E=f" => \$max_class_expect,
    "hard-mask|X!" => \$hard_mask,
    "mask-motifs|m!" => \$mask_motifs,
    "num-elms|n=i" => \$num_elms,
    "min-elm-complexity|C=f" => \$min_elm_complexity,
    "max-elm-probability|P=f" => \$max_elm_probability,
    "logic-filter|l!" => \$logic_filter,
    "type|t=s" => \$type,
    "GFF3|G!" => \$gff,
    "morf-filter|M!" => \$morf_filter,
    "disorder-filter|D!" => \$disorder_filter,
    "anchor-datapath|d=s" => \$anchor_datapath,
) or die "Fatal Error: Problem parsing command-line ".$!;

my @fasta_files = @ARGV;

#Print out some help if it was asked for or if no arguments were given.
pod2usage(-exitstatus => 0, -verbose => 2) if $help;

pod2usage(-exitstatus => 0, -verbose => 1, -msg => "mELM version $VERSION by Matt Oates (C) 2014-2016. Please provide some sequence files to mask or assign ELM motifs to.") 
    unless $update or $upgrade or $list_classes or $list_instances or scalar @fasta_files >= 1;

my $elm = ELM->new(
            type => $type,
            max_class_expect => $max_class_expect,
            min_elm_complexity => $min_elm_complexity,
            max_elm_probability => $max_elm_probability,
            morf_filter => $morf_filter,
            disorder_filter => $disorder_filter,
            logic_filter => $logic_filter,
            num_elms_threshold => $num_elms,
            anchor => ELM::Anchor->new(anchor_datapath => $anchor_datapath)
);

#If we need anchor make sure it's there first
$elm->anchor->check_anchor_installation() if ($morf_filter or $disorder_filter);

#Upgade the melm script to the latest version
if ($upgrade) {
    #Upgrade the melm script to the latest version
    #TODO refactor this to get the latest release fatpack bundle!
    #i.e. for $tag=v1.4.0 get https://github.com/MattOates/melm/releases/download/$tag/melm
    #TODO this has unsafe overwrite without backup of old file, change this!

    say STDERR "Upgrading melm version to latest from GitHub.";
    my $melm_path = abs_path(__FILE__);
    say STDERR "Getting latest melm script from GitHub.";
    my $melm = get_www('https://raw.githubusercontent.com/MattOates/melm/master/bin/melm');
    say STDERR "Upgrading your copy of melm to latest version.";
    open my $melm_fh, '>', $melm_path or die "Could not open melm script for writing.";
    binmode($melm_fh, ':encoding(utf8)');
    print $melm_fh $melm;
    close $melm_fh or die "Could not close melm script.";
    `$melm_path --verbose --update`;

    say STDERR "Done!";
    exit;
}

#Update the ELM classes file and populate elms
if ($update or not $elm->library->exists) {
    $elm->library->update();
}

#Dump out the ELM classes cache
if ($list_classes) {
    $elm->library->list_classes();
    exit;
}

#Dump out the ELM instances cache
if ($list_instances) {
    $elm->library->list_instances();
    exit;
}

#If we are outputting full assignment setup a header
if ($do_assignment) {
    if ($gff) {
        say "##gff-version 3";
    } else {
        say "seqid\telm_id\tstart\tend\telm_seq\tprob\tentropy\tentropy_rate";
    }
}

my $gff_id = 1;
#Process each input sequence file
foreach my $file (@fasta_files) {
    my $seqin = Bio::SeqIO->new(-file => $file);
    my $seqout = Bio::SeqIO->new(-fh => \*STDOUT, -format => 'fasta');
    #For each sequence do ELM assignment
    while (my $seq = $seqin->next_seq) {

        #over the whole ELM library assign
        my @assignment = $elm->assign_all_elms($seq->seq);

        if ($do_assignment) {
            foreach my $assignment (@assignment) {
                #sequence_motif
                if ($gff) {
                    foreach my $ass (@$assignment) {
                        say $seq->id . "\tmELM\tsequence_motif\t$ass->[1]\t$ass->[2]\t$ass->[4]\t.\t.\tID=$gff_id;Name=$ass->[0];Alias=$elm->library->elms{$ass->[0]}{accession}";
                        $gff_id++;
                    }
                } else {
                    say join "\t", $seq->id, @$_ for @$assignment;
                }
            }
        } else {
            $seq->seq($elm->mask($seq->seq, $elm->collapse_assignment($seq->seq, \@assignment, invert => !$mask_motifs), hard_mask => $hard_mask));
            $seqout->write_seq($seq);
        }
    }
}
